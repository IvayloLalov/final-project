{"ast":null,"code":"import { BehaviorSubject, Subscription, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLoggedIn() {\n    return !!this.user$$.getValue();\n  }\n  // subscription: Subscription;\n  constructor(http) {\n    this.http = http;\n    // isLoggedIn: boolean = false;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.subscription = new Subscription();\n    this.loadUserFromLocalStorage();\n    this.subscription = this.user$.subscribe(user => {\n      this.user = user;\n    });\n    // this.subscription = this.user$.subscribe(user => {\n    //   this.isLoggedIn = !!user;\n    //   console.log(this.isLoggedIn)\n    // });\n  }\n\n  loadUserFromLocalStorage() {\n    const accessToken = localStorage.getItem('accessToken');\n    const email = localStorage.getItem('email');\n    const username = localStorage.getItem('username');\n    const _id = localStorage.getItem('userId');\n    if (accessToken && email && username && _id) {\n      this.user$$.next({\n        email,\n        username,\n        _id,\n        accessToken\n      });\n    } else {\n      this.user$$.next(undefined);\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${environment.userUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(res => {\n      console.log(res);\n      localStorage.setItem('accessToken', res.accessToken);\n      localStorage.setItem('email', res.email);\n      localStorage.setItem('username', res.username);\n      localStorage.setItem('userId', res._id);\n      this.user$$.next({\n        email: res.email,\n        username: res.username,\n        _id: res._id,\n        accessToken: res.accessToken\n      });\n    }));\n  }\n  register(username, email, password) {\n    const {\n      userUrl\n    } = environment;\n    return this.http.post(`${userUrl}/register`, {\n      username,\n      email,\n      password\n    }).pipe(tap(res => {\n      localStorage.setItem('accessToken', res.accessToken);\n      localStorage.setItem('email', res.email);\n      localStorage.setItem('username', res.username);\n      localStorage.setItem('userId', res._id);\n      this.user$$.next({\n        email: res.email,\n        username: res.username,\n        _id: res._id,\n        accessToken: res.accessToken\n      });\n    }));\n  }\n  logout() {\n    return this.http.post(`${environment.userUrl}/logout`, {}).pipe(tap(res => {\n      localStorage.clear();\n      this.user$$.next(undefined);\n    }));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Subscription","tap","environment","UserService","isLoggedIn","user$$","getValue","constructor","http","undefined","user$","asObservable","subscription","loadUserFromLocalStorage","subscribe","user","accessToken","localStorage","getItem","email","username","_id","next","login","password","post","userUrl","pipe","res","console","log","setItem","register","logout","clear","ngOnDestroy","unsubscribe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\SoftUni JS Angular\\Final Project\\final-project\\src\\app\\user\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subscription, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment.development';\nimport { UserForAuth } from 'src/types/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService implements OnDestroy {\n  // isLoggedIn: boolean = false;\n  private user$$ = new BehaviorSubject<UserForAuth | undefined>(undefined);\n\n  public user$ = this.user$$.asObservable();\n\n  user: UserForAuth | undefined;\n  private subscription: Subscription = new Subscription();\n  get isLoggedIn(): boolean {\n    return !!this.user$$.getValue();\n  }\n  // subscription: Subscription;\n  constructor(private http: HttpClient) {\n    this.loadUserFromLocalStorage();\n    this.subscription = this.user$.subscribe((user) => {\n      this.user = user;\n    });\n    // this.subscription = this.user$.subscribe(user => {\n    //   this.isLoggedIn = !!user;\n    //   console.log(this.isLoggedIn)\n    // });\n  }\n\n  private loadUserFromLocalStorage(): void {\n    const accessToken = localStorage.getItem('accessToken');\n    const email = localStorage.getItem('email');\n    const username = localStorage.getItem('username');\n    const _id = localStorage.getItem('userId');\n\n    if (accessToken && email && username && _id) {\n      this.user$$.next({ email, username, _id, accessToken });\n    } else {\n      this.user$$.next(undefined);\n    }\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post<{\n        email: string;\n        username: string;\n        _id: string;\n        accessToken: string;\n      }>(`${environment.userUrl}/login`, { email, password })\n      .pipe(\n        tap((res) => {\n          console.log(res);\n\n          localStorage.setItem('accessToken', res.accessToken);\n\n          localStorage.setItem('email', res.email);\n          localStorage.setItem('username', res.username);\n          localStorage.setItem('userId', res._id);\n          this.user$$.next({\n            email: res.email,\n            username: res.username,\n            _id: res._id,\n            accessToken: res.accessToken,\n          });\n        })\n      );\n  }\n  register(username: string, email: string, password: string) {\n    const { userUrl } = environment;\n\n    return this.http\n      .post<{\n        email: string;\n        username: string;\n        _id: string;\n        accessToken: string;\n      }>(`${userUrl}/register`, { username, email, password })\n      .pipe(\n        tap((res) => {\n          localStorage.setItem('accessToken', res.accessToken);\n\n          localStorage.setItem('email', res.email);\n          localStorage.setItem('username', res.username);\n          localStorage.setItem('userId', res._id);\n          this.user$$.next({\n            email: res.email,\n            username: res.username,\n            _id: res._id,\n            accessToken: res.accessToken,\n          });\n        })\n      );\n  }\n\n  logout() {\n    return this.http\n      .post<UserForAuth>(`${environment.userUrl}/logout`, {})\n      .pipe(\n        tap((res) => {\n          localStorage.clear();\n          this.user$$.next(undefined);\n        })\n      );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}