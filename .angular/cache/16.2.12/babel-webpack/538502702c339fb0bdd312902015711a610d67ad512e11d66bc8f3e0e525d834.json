{"ast":null,"code":"// import { Injectable, inject } from '@angular/core';\n// import {\n//   Router,\n//   ActivatedRouteSnapshot,\n//   RouterStateSnapshot,\n//   CanActivateFn,\n// } from '@angular/router';\n// import { ApiService } from '../api.service';\n// import { Restaurant } from 'src/types/restaurant';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// class PermissionsService {\n//   constructor(private router: Router, private api: ApiService) {}\n//   restaurant = {} as Restaurant;\n//   canActivate(\n//     next: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot\n//   ): boolean {\n//     const id = next.params['restaurantId'];\n//     const userId = localStorage.getItem('userId');\n//     // this.api.getRestaurant(id).pipe(\n//     //   tap((restaurant) => {\n//     //     this.restaurant = restaurant;\n//     //   })\n//     // );\n//     this.api.getRestaurant(id).subscribe((restaurant) => {\n//       this.restaurant = restaurant;\n//       localStorage.setItem('ownerId', restaurant._ownerId);\n//     });\n//     const ownerId = localStorage.getItem('ownerId');\n//     const isOwner = ownerId === userId;\n//     return !isOwner;\n//   }\n// }\n// export const IsOwnerGuard: CanActivateFn = (\n//   next: ActivatedRouteSnapshot,\n//   state: RouterStateSnapshot\n// ): boolean => {\n//   return inject(PermissionsService).canActivate(next, state);\n// };\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from '../api.service';\nexport const IsOwnerGuard = (route, state) => {\n  const router = inject(Router);\n  const api = inject(ApiService);\n  const userId = localStorage.getItem('userId');\n  const restaurantId = route.params['restaurantId'];\n  api.getRestaurant(restaurantId).subscribe(restaurant => {\n    restaurant = restaurant;\n    localStorage.setItem('ownerId', restaurant._ownerId);\n  });\n  const ownerId = localStorage.getItem('ownerId');\n  const isOwner = ownerId === userId;\n  console.log('ownerId', ownerId);\n  console.log('userId', userId);\n  console.log('isOwner', isOwner);\n  if (isOwner) {\n    localStorage.removeItem('ownerId');\n    return true;\n  } else {\n    router.navigate(['/home']);\n    return false;\n  }\n};","map":{"version":3,"names":["inject","Router","ApiService","IsOwnerGuard","route","state","router","api","userId","localStorage","getItem","restaurantId","params","getRestaurant","subscribe","restaurant","setItem","_ownerId","ownerId","isOwner","console","log","removeItem","navigate"],"sources":["D:\\SoftUni JS Angular\\Final Project\\final-project\\src\\app\\guards\\isOwner.guard.ts"],"sourcesContent":["// import { Injectable, inject } from '@angular/core';\r\n// import {\r\n//   Router,\r\n//   ActivatedRouteSnapshot,\r\n//   RouterStateSnapshot,\r\n//   CanActivateFn,\r\n// } from '@angular/router';\r\n// import { ApiService } from '../api.service';\r\n\r\n// import { Restaurant } from 'src/types/restaurant';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// class PermissionsService {\r\n//   constructor(private router: Router, private api: ApiService) {}\r\n//   restaurant = {} as Restaurant;\r\n\r\n//   canActivate(\r\n//     next: ActivatedRouteSnapshot,\r\n//     state: RouterStateSnapshot\r\n//   ): boolean {\r\n//     const id = next.params['restaurantId'];\r\n//     const userId = localStorage.getItem('userId');\r\n\r\n//     // this.api.getRestaurant(id).pipe(\r\n//     //   tap((restaurant) => {\r\n//     //     this.restaurant = restaurant;\r\n//     //   })\r\n//     // );\r\n\r\n//     this.api.getRestaurant(id).subscribe((restaurant) => {\r\n//       this.restaurant = restaurant;\r\n//       localStorage.setItem('ownerId', restaurant._ownerId);\r\n//     });\r\n\r\n//     const ownerId = localStorage.getItem('ownerId');\r\n//     const isOwner = ownerId === userId;\r\n\r\n//     return !isOwner;\r\n//   }\r\n// }\r\n\r\n// export const IsOwnerGuard: CanActivateFn = (\r\n//   next: ActivatedRouteSnapshot,\r\n//   state: RouterStateSnapshot\r\n// ): boolean => {\r\n//   return inject(PermissionsService).canActivate(next, state);\r\n// };\r\n\r\nimport { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { ApiService } from '../api.service';\r\n\r\nexport const IsOwnerGuard: CanActivateFn = (route, state) => {\r\n  const router = inject(Router);\r\n  const api = inject(ApiService);\r\n  const userId = localStorage.getItem('userId');\r\n  const restaurantId = route.params['restaurantId'];\r\n\r\n  api.getRestaurant(restaurantId).subscribe((restaurant) => {\r\n    restaurant = restaurant;\r\n    localStorage.setItem('ownerId', restaurant._ownerId);\r\n  });\r\n\r\n  const ownerId = localStorage.getItem('ownerId');\r\n  const isOwner = ownerId === userId;\r\n  console.log('ownerId', ownerId);\r\n  console.log('userId', userId);\r\n\r\n  console.log('isOwner', isOwner);\r\n\r\n  if (isOwner) {\r\n    localStorage.removeItem('ownerId');\r\n    return true;\r\n  } else {\r\n    router.navigate(['/home']);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,OAAO,MAAMC,YAAY,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC1D,MAAMC,MAAM,GAAGN,MAAM,CAACC,MAAM,CAAC;EAC7B,MAAMM,GAAG,GAAGP,MAAM,CAACE,UAAU,CAAC;EAC9B,MAAMM,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,MAAMC,YAAY,GAAGP,KAAK,CAACQ,MAAM,CAAC,cAAc,CAAC;EAEjDL,GAAG,CAACM,aAAa,CAACF,YAAY,CAAC,CAACG,SAAS,CAAEC,UAAU,IAAI;IACvDA,UAAU,GAAGA,UAAU;IACvBN,YAAY,CAACO,OAAO,CAAC,SAAS,EAAED,UAAU,CAACE,QAAQ,CAAC;EACtD,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGT,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EAC/C,MAAMS,OAAO,GAAGD,OAAO,KAAKV,MAAM;EAClCY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,OAAO,CAAC;EAC/BE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEb,MAAM,CAAC;EAE7BY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;EAE/B,IAAIA,OAAO,EAAE;IACXV,YAAY,CAACa,UAAU,CAAC,SAAS,CAAC;IAClC,OAAO,IAAI;GACZ,MAAM;IACLhB,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC1B,OAAO,KAAK;;AAEhB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}