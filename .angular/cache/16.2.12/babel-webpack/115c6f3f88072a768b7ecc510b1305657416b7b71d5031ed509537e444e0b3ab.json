{"ast":null,"code":"// import { Injectable, inject } from '@angular/core';\n// import {\n//   Router,\n//   ActivatedRouteSnapshot,\n//   RouterStateSnapshot,\n//   CanActivateFn,\n// } from '@angular/router';\n// import { ApiService } from '../api.service';\n// import { Restaurant } from 'src/types/restaurant';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// class PermissionsService {\n//   constructor(private router: Router, private api: ApiService) {}\n//   restaurant = {} as Restaurant;\n//   canActivate(\n//     next: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot\n//   ): boolean {\n//     const id = next.params['restaurantId'];\n//     const userId = localStorage.getItem('userId');\n//     // this.api.getRestaurant(id).pipe(\n//     //   tap((restaurant) => {\n//     //     this.restaurant = restaurant;\n//     //   })\n//     // );\n//     this.api.getRestaurant(id).subscribe((restaurant) => {\n//       this.restaurant = restaurant;\n//       localStorage.setItem('ownerId', restaurant._ownerId);\n//     });\n//     const ownerId = localStorage.getItem('ownerId');\n//     const isOwner = ownerId === userId;\n//     return !isOwner;\n//   }\n// }\n// export const IsOwnerGuard: CanActivateFn = (\n//   next: ActivatedRouteSnapshot,\n//   state: RouterStateSnapshot\n// ): boolean => {\n//   return inject(PermissionsService).canActivate(next, state);\n// };\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nexport const IsOwnerGuard = (route, state) => {\n  const router = inject(Router);\n  const userId = localStorage.getItem('userId');\n  const ownerId = localStorage.getItem('ownerId');\n  const isTheOwner = ownerId === userId;\n  console.log('ownerId', ownerId);\n  console.log('userId', userId);\n  console.log('isOwner', isTheOwner);\n  if (!isTheOwner) {\n    router.navigate(['home']);\n    return false;\n  } else {\n    return true;\n  }\n};","map":{"version":3,"names":["inject","Router","IsOwnerGuard","route","state","router","userId","localStorage","getItem","ownerId","isTheOwner","console","log","navigate"],"sources":["D:\\SoftUni JS Angular\\Final Project\\final-project\\src\\app\\guards\\isOwner.guard.ts"],"sourcesContent":["// import { Injectable, inject } from '@angular/core';\r\n// import {\r\n//   Router,\r\n//   ActivatedRouteSnapshot,\r\n//   RouterStateSnapshot,\r\n//   CanActivateFn,\r\n// } from '@angular/router';\r\n// import { ApiService } from '../api.service';\r\n\r\n// import { Restaurant } from 'src/types/restaurant';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// class PermissionsService {\r\n//   constructor(private router: Router, private api: ApiService) {}\r\n//   restaurant = {} as Restaurant;\r\n\r\n//   canActivate(\r\n//     next: ActivatedRouteSnapshot,\r\n//     state: RouterStateSnapshot\r\n//   ): boolean {\r\n//     const id = next.params['restaurantId'];\r\n//     const userId = localStorage.getItem('userId');\r\n\r\n//     // this.api.getRestaurant(id).pipe(\r\n//     //   tap((restaurant) => {\r\n//     //     this.restaurant = restaurant;\r\n//     //   })\r\n//     // );\r\n\r\n//     this.api.getRestaurant(id).subscribe((restaurant) => {\r\n//       this.restaurant = restaurant;\r\n//       localStorage.setItem('ownerId', restaurant._ownerId);\r\n//     });\r\n\r\n//     const ownerId = localStorage.getItem('ownerId');\r\n//     const isOwner = ownerId === userId;\r\n\r\n//     return !isOwner;\r\n//   }\r\n// }\r\n\r\n// export const IsOwnerGuard: CanActivateFn = (\r\n//   next: ActivatedRouteSnapshot,\r\n//   state: RouterStateSnapshot\r\n// ): boolean => {\r\n//   return inject(PermissionsService).canActivate(next, state);\r\n// };\r\n\r\nimport { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { ApiService } from '../api.service';\r\n\r\nexport const IsOwnerGuard: CanActivateFn = (route, state) => {\r\n  const router = inject(Router);\r\n\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  const ownerId = localStorage.getItem('ownerId');\r\n  const isTheOwner = ownerId === userId;\r\n  console.log('ownerId', ownerId);\r\n  console.log('userId', userId);\r\n\r\n  console.log('isOwner', isTheOwner);\r\n\r\n  if (!isTheOwner) {\r\n    router.navigate(['home']);\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AAGvD,OAAO,MAAMC,YAAY,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC1D,MAAMC,MAAM,GAAGL,MAAM,CAACC,MAAM,CAAC;EAE7B,MAAMK,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAE7C,MAAMC,OAAO,GAAGF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EAC/C,MAAME,UAAU,GAAGD,OAAO,KAAKH,MAAM;EACrCK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,OAAO,CAAC;EAC/BE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEN,MAAM,CAAC;EAE7BK,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,UAAU,CAAC;EAElC,IAAI,CAACA,UAAU,EAAE;IACfL,MAAM,CAACQ,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IACzB,OAAO,KAAK;GACb,MAAM;IACL,OAAO,IAAI;;AAEf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}