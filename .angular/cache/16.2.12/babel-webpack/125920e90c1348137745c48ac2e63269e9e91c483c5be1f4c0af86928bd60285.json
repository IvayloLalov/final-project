{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./core/error/error.service\";\nimport * as i2 from \"@angular/router\";\nexport class AppInterceptor {\n  constructor(errorService, router) {\n    this.errorService = errorService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    // if (req.url.startsWith(environment.dataUrl || environment.userUrl)) {\n    //   req = req.clone({\n    //     withCredentials: true,\n    //   });\n    // }\n    const accessToken = localStorage.getItem('accessToken');\n    if (req.url.startsWith('http://localhost:3030') && accessToken) {\n      req = req.clone({\n        setHeaders: {\n          'X-Authorization': accessToken\n        }\n      });\n    }\n    if (!req.headers.has('Content-Type')) {\n      req = req.clone({\n        setHeaders: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    return next.handle(req).pipe(catchError(err => {\n      if (err.status === 401) {\n        this.router.navigate(['/auth/login']);\n      } else {\n        this.errorService.setError(err);\n        this.router.navigate(['/error']);\n      }\n      return [err];\n    }));\n  }\n  static #_ = this.ɵfac = function AppInterceptor_Factory(t) {\n    return new (t || AppInterceptor)(i0.ɵɵinject(i1.ErrorService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppInterceptor,\n    factory: AppInterceptor.ɵfac\n  });\n}\nexport const appInterceptorProvider = {\n  useClass: AppInterceptor,\n  multi: true,\n  provide: HTTP_INTERCEPTORS\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","catchError","AppInterceptor","constructor","errorService","router","intercept","req","next","accessToken","localStorage","getItem","url","startsWith","clone","setHeaders","headers","has","handle","pipe","err","status","navigate","setError","_","i0","ɵɵinject","i1","ErrorService","i2","Router","_2","factory","ɵfac","appInterceptorProvider","useClass","multi","provide"],"sources":["D:\\SoftUni JS Angular\\Final Project\\final-project\\src\\app\\app.interceptor.ts"],"sourcesContent":["import {\r\n  HTTP_INTERCEPTORS,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable, Provider } from '@angular/core';\r\nimport { Observable, catchError } from 'rxjs';\r\nimport { ErrorService } from './core/error/error.service';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from 'src/environments/environment.development';\r\n\r\n@Injectable()\r\nexport class AppInterceptor implements HttpInterceptor {\r\n  constructor(private errorService: ErrorService, private router: Router) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // if (req.url.startsWith(environment.dataUrl || environment.userUrl)) {\r\n    //   req = req.clone({\r\n    //     withCredentials: true,\r\n    //   });\r\n    // }\r\n\r\n    const accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (req.url.startsWith('http://localhost:3030') && accessToken) {\r\n      req = req.clone({\r\n        setHeaders: {\r\n          'X-Authorization': accessToken,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (!req.headers.has('Content-Type')) {\r\n      req = req.clone({\r\n        setHeaders: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((err) => {\r\n        if (err.status === 401) {\r\n          this.router.navigate(['/auth/login']);\r\n        } else {\r\n          this.errorService.setError(err);\r\n          this.router.navigate(['/error']);\r\n        }\r\n\r\n        return [err];\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport const appInterceptorProvider: Provider = {\r\n  useClass: AppInterceptor,\r\n  multi: true,\r\n  provide: HTTP_INTERCEPTORS,\r\n};\r\n"],"mappings":"AAAA,SACEA,iBAAiB,QAKZ,sBAAsB;AAE7B,SAAqBC,UAAU,QAAQ,MAAM;;;;AAM7C,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEzEC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAEjB;IACA;IACA;IACA;IACA;IAEA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIJ,GAAG,CAACK,GAAG,CAACC,UAAU,CAAC,uBAAuB,CAAC,IAAIJ,WAAW,EAAE;MAC9DF,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC;QACdC,UAAU,EAAE;UACV,iBAAiB,EAAEN;;OAEtB,CAAC;;IAGJ,IAAI,CAACF,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,EAAE;MACpCV,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC;QACdC,UAAU,EAAE;UACV,cAAc,EAAE;;OAEnB,CAAC;;IAGJ,OAAOP,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC,CAACY,IAAI,CAC1BlB,UAAU,CAAEmB,GAAG,IAAI;MACjB,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;QACtB,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;OACtC,MAAM;QACL,IAAI,CAAClB,YAAY,CAACmB,QAAQ,CAACH,GAAG,CAAC;QAC/B,IAAI,CAACf,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAGlC,OAAO,CAACF,GAAG,CAAC;IACd,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBA3CUtB,cAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd7B,cAAc;IAAA8B,OAAA,EAAd9B,cAAc,CAAA+B;EAAA;;AA8C3B,OAAO,MAAMC,sBAAsB,GAAa;EAC9CC,QAAQ,EAAEjC,cAAc;EACxBkC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAErC;CACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}