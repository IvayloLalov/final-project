{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.dataUrl = environment.dataUrl;\n  }\n  getRestaurants() {\n    return this.http.get(`${this.dataUrl}/restaurants`);\n  }\n  getRestaurant(id) {\n    return this.http.get(`${this.dataUrl}/restaurants/${id}`);\n  }\n  addRestaurant(name, type, location, img, description) {\n    return this.http.post(`${this.dataUrl}/restaurants`, {\n      name,\n      type,\n      location,\n      img,\n      description\n    });\n  }\n  editRestaurant(name, type, location, img, description, id) {\n    return this.http.put(`${this.dataUrl}/restaurants/${id}`, {\n      name,\n      type,\n      location,\n      img,\n      description\n    });\n  }\n  deleteRestaurant(id) {\n    return this.http.delete(`${this.dataUrl}/restaurants/${id}`);\n  }\n  addCommentService(text, userId, username, restaurantId) {\n    return this.http.post(`${this.dataUrl}/comments`, {\n      text,\n      userId,\n      username,\n      restaurantId\n    });\n  }\n  getCommentService() {\n    return this.http.get(`${this.dataUrl}/comments`);\n  }\n  getSearchedRestaurants(search) {\n    return this.http.get(`restaurants?where=type%3D%22${search}%22`);\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","ApiService","constructor","http","dataUrl","getRestaurants","get","getRestaurant","id","addRestaurant","name","type","location","img","description","post","editRestaurant","put","deleteRestaurant","delete","addCommentService","text","userId","username","restaurantId","getCommentService","getSearchedRestaurants","search","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\SoftUni JS Angular\\Final Project\\final-project\\src\\app\\api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment.development';\nimport { Comment } from 'src/types/comment';\nimport { Restaurant, RestaurantForUpdate } from 'src/types/restaurant';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  dataUrl = environment.dataUrl;\n  constructor(private http: HttpClient) {}\n\n  getRestaurants() {\n    return this.http.get<Restaurant[]>(`${this.dataUrl}/restaurants`);\n  }\n\n  getRestaurant(id: string) {\n    return this.http.get<Restaurant>(`${this.dataUrl}/restaurants/${id}`);\n  }\n\n  addRestaurant(\n    name: string,\n    type: string,\n    location: string,\n    img: string,\n    description: string\n  ) {\n    return this.http.post<Restaurant>(`${this.dataUrl}/restaurants`, {\n      name,\n      type,\n      location,\n      img,\n      description,\n    });\n  }\n\n  editRestaurant(\n    name: string,\n    type: string,\n    location: string,\n    img: string,\n    description: string,\n    id: string\n  ) {\n    return this.http.put<RestaurantForUpdate>(\n      `${this.dataUrl}/restaurants/${id}`,\n      {\n        name,\n        type,\n        location,\n        img,\n        description,\n      }\n    );\n  }\n\n  deleteRestaurant(id: string) {\n    return this.http.delete<Restaurant>(`${this.dataUrl}/restaurants/${id}`);\n  }\n\n  addCommentService(\n    text: string,\n    userId: string,\n    username: string,\n    restaurantId: string\n  ) {\n    return this.http.post<Comment>(`${this.dataUrl}/comments`, {\n      text,\n      userId,\n      username,\n      restaurantId,\n    });\n  }\n\n  getCommentService() {\n    return this.http.get<Comment[]>(`${this.dataUrl}/comments`);\n  }\n\n  getSearchedRestaurants(search: string) {\n    return this.http.get<Restaurant[]>(\n      `restaurants?where=type%3D%22${search}%22`\n    );\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,0CAA0C;;;AAOtE,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,OAAO,GAAGJ,WAAW,CAACI,OAAO;EACU;EAEvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACF,OAAO,cAAc,CAAC;EACnE;EAEAG,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,OAAO,gBAAgBI,EAAE,EAAE,CAAC;EACvE;EAEAC,aAAaA,CACXC,IAAY,EACZC,IAAY,EACZC,QAAgB,EAChBC,GAAW,EACXC,WAAmB;IAEnB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAa,GAAG,IAAI,CAACX,OAAO,cAAc,EAAE;MAC/DM,IAAI;MACJC,IAAI;MACJC,QAAQ;MACRC,GAAG;MACHC;KACD,CAAC;EACJ;EAEAE,cAAcA,CACZN,IAAY,EACZC,IAAY,EACZC,QAAgB,EAChBC,GAAW,EACXC,WAAmB,EACnBN,EAAU;IAEV,OAAO,IAAI,CAACL,IAAI,CAACc,GAAG,CAClB,GAAG,IAAI,CAACb,OAAO,gBAAgBI,EAAE,EAAE,EACnC;MACEE,IAAI;MACJC,IAAI;MACJC,QAAQ;MACRC,GAAG;MACHC;KACD,CACF;EACH;EAEAI,gBAAgBA,CAACV,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACgB,MAAM,CAAa,GAAG,IAAI,CAACf,OAAO,gBAAgBI,EAAE,EAAE,CAAC;EAC1E;EAEAY,iBAAiBA,CACfC,IAAY,EACZC,MAAc,EACdC,QAAgB,EAChBC,YAAoB;IAEpB,OAAO,IAAI,CAACrB,IAAI,CAACY,IAAI,CAAU,GAAG,IAAI,CAACX,OAAO,WAAW,EAAE;MACzDiB,IAAI;MACJC,MAAM;MACNC,QAAQ;MACRC;KACD,CAAC;EACJ;EAEAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACtB,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACF,OAAO,WAAW,CAAC;EAC7D;EAEAsB,sBAAsBA,CAACC,MAAc;IACnC,OAAO,IAAI,CAACxB,IAAI,CAACG,GAAG,CAClB,+BAA+BqB,MAAM,KAAK,CAC3C;EACH;EAAC,QAAAC,CAAA,G;qBA1EU3B,UAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVhC,UAAU;IAAAiC,OAAA,EAAVjC,UAAU,CAAAkC,IAAA;IAAAC,UAAA,EAFT;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}